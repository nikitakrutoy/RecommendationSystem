{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Классификация статей"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Импортируем нужные библиотеки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import sklearn.feature_extraction.text, re\n",
    "import sklearn.linear_model\n",
    "import sklearn.metrics\n",
    "import sklearn.grid_search"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Делаем паттерн для создания мешка слов для статей"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "WORD_PATTERN = '[a-z]+'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Множества интересный и скучных статей из размеченной выборки."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "interesting = set()\n",
    "boring = set()\n",
    "data = list()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Загрузка размеченных статей"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def get_text(article_path):\n",
    "    with open(article_path, 'r') as html:\n",
    "        page = html.read()\n",
    "    return page\n",
    "\n",
    "with open('interesting.txt', 'r') as lines:\n",
    "    while True:\n",
    "        article_name = lines.readline().rstrip()\n",
    "        if article_name == '':\n",
    "            break\n",
    "        article = get_text(article_name)\n",
    "        interesting.add(article)\n",
    "        data.append(article)\n",
    "\n",
    "with open('boring.txt', 'r') as lines:\n",
    "    while True:\n",
    "        article_name = lines.readline().rstrip()\n",
    "        if article_name == '':\n",
    "            break\n",
    "        article = get_text(article_name)\n",
    "        boring.add(article)\n",
    "        data.append(article)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пермешаем данных для лучшей рабаты классификатора"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import random\n",
    "random.shuffle(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выделим из данных вектор фичей tf и idf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "vectorizer = sklearn.feature_extraction.text.TfidfVectorizer(token_pattern=WORD_PATTERN)\n",
    "X = vectorizer.fit_transform(data)\n",
    "Y = np.array([1 if t in interesting else 0 for t in data])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Созданим выобрки для обучение, поиска параметров и тестирования"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_train, X_search, X_test = X[:80], X[80:100], X[100:120]\n",
    "Y_train, Y_search, Y_test = Y[:80], Y[80:100], Y[100:120]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Обучение классификатора и оценка обучение"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Score:  0.469696969697\n"
     ]
    }
   ],
   "source": [
    "cls = sklearn.linear_model.SGDClassifier(loss='log')\n",
    "cls.fit(X_train, Y_train)\n",
    "\n",
    "metric = sklearn.metrics.roc_auc_score\n",
    "\n",
    "Y_pred = cls.predict_proba(X_test)[:, 1]\n",
    "\n",
    "score = metric(Y_test, Y_pred)\n",
    "print('Score: ', score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Кросс-валидация"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Сетка парметров"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "grid = {\n",
    "    'penalty': ['elasticnet'],\n",
    "    'alpha': [0.001, 0.0001, 0.00001, 0.000001, 0.0000001],\n",
    "    'l1_ratio': [0.0, 0.01, 0.05, 0.10, 0.2, 0.3, 0.4, 0.5],\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Поиск параметров"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def scorer(estimator, X, Y):\n",
    "    metric = sklearn.metrics.roc_auc_score\n",
    "    return metric(Y, estimator.predict_proba(X)[:, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "searcher = sklearn.grid_search.GridSearchCV(                 \n",
    "    estimator=sklearn.linear_model.SGDClassifier(loss='log'),\n",
    "    param_grid=grid,                                         \n",
    "    scoring=scorer,                                          \n",
    "    cv=5,                                                    \n",
    "    n_jobs=1                                                 \n",
    ")                                                            "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Оценка качества"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.625\n",
      "{'alpha': 1e-06, 'l1_ratio': 0.2, 'penalty': 'elasticnet'}\n",
      "0.585858585859\n"
     ]
    }
   ],
   "source": [
    "searcher.fit(X_search, Y_search);      \n",
    "print(searcher.best_score_)            \n",
    "print(searcher.best_params_)           \n",
    "                                       \n",
    "best_cls = searcher.best_estimator_    \n",
    "                                       \n",
    "print(scorer(best_cls, X_test, Y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "Мо"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
